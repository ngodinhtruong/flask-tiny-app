from flask import Flask, redirect, url_for, render_template, request, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask import make_response
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
import os

app = Flask(__name__)
app.secret_key = os.urandom(16)
# üî• Kh·ªüi t·∫°o LoginManager ƒë√∫ng c√°ch
login_manager = LoginManager()
login_manager.init_app(app)  # ƒê√∫ng c√°ch!
login_manager.login_view = 'signin'  # N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng ƒë·∫øn login
login_manager.login_message_category = 'info'

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mydatabase.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), nullable=False)  # Cho ph√©p h·ªç t√™n gi·ªëng nhau
    password = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)  # Email ph·∫£i l√† duy nh·∫•t
    user_role = db.Column(db.Integer, nullable=False, default=0)
    user_block = db.Column(db.Integer, nullable=False, default=0)
    def __repr__(self):
        return f'{self.username}'
# Fix l·ªói: Thi·∫øt l·∫≠p user_loader ƒë·ªÉ Flask-Login c√≥ th·ªÉ t√¨m 
# user t·ª´ database
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))  # T√¨m user theo ID


@app.route('/signup', methods=['GET', 'POST'])
def signup():
    errors = {}  #ƒê√¢y l√† bi·∫øn l·ªói ƒë·ªÉ l∆∞u ƒë∆∞·ª£c nhi·ªÅu l·ªói xu·∫•t hi·ªán c≈©ng l√∫c 
    form_data = session.get("form_data", {"firstname": "", "lastname": "", "email": ""}) # L·∫•y d·ªØ li·ªáu t·ª´ session v√† hi·ªÉn th·ªã l·∫°i form n·∫øu c√≥ l·ªói

    if request.method == 'POST':
        first_name = request.form.get('firstname')
        last_name = request.form.get('lastname')
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')

        if not first_name or not last_name or not email or not password or not confirm_password:
            errors["general"] = "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!"

        if password and confirm_password and password != confirm_password:
            errors["confirm_password"] = "M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp!"

        existing_email = User.query.filter_by(email=email).first()
        if existing_email:
            errors["email"] = "Email ƒë√£ t·ªìn t·∫°i!"

        # Ki·ªÉm tra c√°c l·ªói t·ªìn t·∫°i trong secssion
        if errors:
            session["form_data"] = {
                "firstname": first_name if "firstname" not in errors else "",
                "lastname": last_name if "lastname" not in errors else "",
                "email": email if "email" not in errors else ""
            }
            session["errors"] = errors
            return redirect(url_for('signup'))

        # L∆∞u
        new_user = User(username=f"{first_name} {last_name}", password=password, email=email,user_role = 0,user_block = False)
        db.session.add(new_user)
        db.session.commit()

        session.pop("form_data", None)
        session.pop("errors", None)

        flash("ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ƒëƒÉng nh·∫≠p.", "success")
        return redirect(url_for('signin'))

    form_data = session.pop("form_data", {"firstname": "", "lastname": "", "email": ""})
    errors = session.pop("errors", {})

    return render_template('logup.html', errors=errors, form_data=form_data)



@app.route('/signin', methods = ['POST','GET'])
def signin():
    if 'user' in session:
        if session['user'] == True:
            return redirect(url_for('admin'))
        return redirect(url_for('home'))
    if request.method == 'POST':
        user_email = request.form['email_acc']
        user_pass = request.form['password_acc']
        # N·∫øu ch∆∞a nh·∫≠p g√¨
        if user_email=='' or user_pass=='':
            session['error_message'] =  "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u"
            return redirect(url_for('signin'))
        user_sql = User.query.filter_by(email=user_email).first()
        if user_sql and user_sql.password == user_pass:
            if user_sql.user_block == 1:
                session['error_message'] = 'T√†i kho·∫£ng c·ªßa b·∫°n ƒë√£ b·ªã ch·∫∑n'
                return redirect(url_for('signin'))
            login_user(user_sql, remember=True)
            if user_sql.user_role == 1:
                return redirect(url_for('admin'))
            else:
                return redirect(url_for('home'))
        session['error_message'] = 'T√†i kho·∫£ng ho·∫∑c m·∫≠t kh·∫©u sai'
        return redirect(url_for('signin'))
               
    error_message = session.pop('error_message', None)  # X√≥a th√¥ng b√°o sau khi load trang
    session.clear()
    return render_template('login.html', error_message=error_message)

@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html')


@app.route('/logout')
@login_required
def log_out():
    logout_user()  # X√≥a tr·∫°ng th√°i ƒëƒÉng nh·∫≠p c·ªßa Flask-Login
   
    return redirect(url_for('signin'))

@app.route('/admin', methods=['POST','GET'])
@login_required
def admin():
    if request.method=='POST':
        if request.form.get('ƒêƒÉng xu·∫•t')== 'logout':
            return redirect(url_for('log_out'))
        if 'user_id' in request.form:
            print('request.form: ',request.form)
            user_id = int(request.form['user_id'])
            user_block_change = 0 if 'user_block' in request.form else 1
            user_sql = User.query.get(user_id)

            if 'reset-password' in request.form:
                default_password = 123
                if user_sql:
                    user_sql.password = default_password
                    db.session.commit()
            if user_sql:
                user_sql.user_block = user_block_change
                db.session.commit()
            return redirect(url_for('admin'))
    print(session)
    all_user = User.query.all()
    return render_template('admin.html', rows = all_user)


@app.route('/',methods=['POST','GET'])
def home():
    if request.method=='POST':
        if request.form.get('sign in') == 'Sign in':
            return redirect(url_for('signin'))
    return render_template('top_home.html')
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
